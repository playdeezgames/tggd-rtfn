@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Placeholder</PageTitle>
<table class="mcga-table" tabindex="1" @onkeydown="HandleKeyDownAsync" @onkeydown:preventDefault="ShouldPreventDefault" autofocus>
	@foreach (var row in Enumerable.Range(0, CHARACTER_ROWS))
	{
		<tr>
			@foreach (var column in Enumerable.Range(0, CHARACTER_COLUMNS))
			{
				<td class="mcga-td" style="background-position: @GetBackgroundPosition(column, row)"></td>
			}
		</tr>
	}
</table>
@code{
	IUIContext context = new UIContext(CHARACTER_COLUMNS, CHARACTER_ROWS, FrameBuffer);
	const int CHARACTER_COLUMNS = 40;
	const int CHARACTER_ROWS = 25;
	const int CHARACTER_WIDTH = 24;
	const int CHARACTER_HEIGHT = 24;
	const int CHARACTER_COUNT = 256;
	static int[] FrameBuffer = new int[CHARACTER_ROWS * CHARACTER_COLUMNS];
	private bool ShouldPreventDefault = false;
	string GetBackgroundPosition(int column, int row)
	{
		int character = FrameBuffer[column + row * CHARACTER_COLUMNS];
		int characterX = -(character % CHARACTER_COUNT) * CHARACTER_WIDTH;
		int characterY = -(character / CHARACTER_COUNT) * CHARACTER_HEIGHT;
		return $"{characterX}px {characterY}px";
	}
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		context.Refresh();
		await ProcessSfxAsync();
	}
	private async Task ProcessSfxAsync()
	{
		while (!string.IsNullOrEmpty(context.Sfx))
		{
			await JSRuntime.InvokeVoidAsync("playSfx", context.Sfx);
			context.NextSfx();
		}
	}
	readonly IReadOnlyDictionary<string, string> CommandTable = new Dictionary<string, string>()
	{
		["q"] = Command.Left,
		["z"] = Command.Up,
		["w"] = Command.Up,
		["a"] = Command.Left,
		["s"] = Command.Down,
		["d"] = Command.Right,
		["ArrowUp"] = Command.Up,
		["ArrowDown"] = Command.Down,
		["ArrowLeft"] = Command.Left,
		["ArrowRight"] = Command.Right,
		[" "] = Command.Green,
		["Enter"] = Command.Blue,
		["Tab"] = Command.Yellow,
		["Backspace"] = Command.Red
	};
	private async Task HandleKeyDownAsync(KeyboardEventArgs args)
	{
		if (CommandTable.TryGetValue(args.Key, out string? command))
		{
			ShouldPreventDefault = true;
			context!.HandleCommand(command);
			context!.Refresh();
			await ProcessSfxAsync();
		}
		else
		{
			ShouldPreventDefault = false;
		}
	}
}